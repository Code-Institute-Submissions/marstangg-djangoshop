{"changed":true,"filter":false,"title":"views.py","tooltip":"/core/views.py","value":"from django.conf import settings\nfrom django.contrib import messages\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.shortcuts import render, get_object_or_404\nfrom django.views.generic import ListView, DetailView, View\nfrom django.shortcuts import redirect\nfrom django.utils import timezone\nfrom .forms import CheckoutForm, CouponForm, RefundForm, PaymentForm\nfrom .models import Item, OrderItem, Order, Address, Payment, Coupon, Refund, UserProfile\n\nimport random\nimport string\nimport stripe\n\nstripe.api_key = 'pk_live_vQHdZRsweoNg63U2tZTW21zX00wFXw1TKo'\n\n\ndef create_ref_code():\n    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=20))\n\n\ndef products(request):\n    context = {\n        'items': Item.objects.all()\n    }\n    return render(request, \"products.html\", context)\n\n\ndef is_valid_form(values):\n    valid = True\n    for field in values:\n        if field == '':\n            valid = False\n    return valid\n\n\nclass CheckoutView(View):\n    def get(self, *args, **kwargs):\n        try:\n            order = Order.objects.get(user=self.request.user, ordered=False)\n            form = CheckoutForm()\n            context = {\n                'form': form,\n                'couponform': CouponForm(),\n                'order': order,\n                'DISPLAY_COUPON_FORM': True\n            }\n\n            shipping_address_qs = Address.objects.filter(\n                user=self.request.user,\n                address_type='S',\n                default=True\n            )\n            if shipping_address_qs.exists():\n                context.update(\n                    {'default_shipping_address': shipping_address_qs[0]})\n\n            billing_address_qs = Address.objects.filter(\n                user=self.request.user,\n                address_type='B',\n                default=True\n            )\n            if billing_address_qs.exists():\n                context.update(\n                    {'default_billing_address': billing_address_qs[0]})\n\n            return render(self.request, \"checkout.html\", context)\n        except ObjectDoesNotExist:\n            messages.info(self.request, \"You do not have an active order\")\n            return redirect(\"core:checkout\")\n\n    def post(self, *args, **kwargs):\n        form = CheckoutForm(self.request.POST or None)\n        try:\n            order = Order.objects.get(user=self.request.user, ordered=False)\n            if form.is_valid():\n\n                use_default_shipping = form.cleaned_data.get(\n                    'use_default_shipping')\n                if use_default_shipping:\n                    print(\"Using the defualt shipping address\")\n                    address_qs = Address.objects.filter(\n                        user=self.request.user,\n                        address_type='S',\n                        default=True\n                    )\n                    if address_qs.exists():\n                        shipping_address = address_qs[0]\n                        order.shipping_address = shipping_address\n                        order.save()\n                    else:\n                        messages.info(\n                            self.request, \"No default shipping address available\")\n                        return redirect('core:checkout')\n                else:\n                    print(\"User is entering a new shipping address\")\n                    shipping_address1 = form.cleaned_data.get(\n                        'shipping_address')\n                    shipping_address2 = form.cleaned_data.get(\n                        'shipping_address2')\n                    shipping_country = form.cleaned_data.get(\n                        'shipping_country')\n                    shipping_zip = form.cleaned_data.get('shipping_zip')\n\n                    if is_valid_form([shipping_address1, shipping_country, shipping_zip]):\n                        shipping_address = Address(\n                            user=self.request.user,\n                            street_address=shipping_address1,\n                            apartment_address=shipping_address2,\n                            country=shipping_country,\n                            zip=shipping_zip,\n                            address_type='S'\n                        )\n                        shipping_address.save()\n\n                        order.shipping_address = shipping_address\n                        order.save()\n\n                        set_default_shipping = form.cleaned_data.get(\n                            'set_default_shipping')\n                        if set_default_shipping:\n                            shipping_address.default = True\n                            shipping_address.save()\n\n                    else:\n                        messages.info(\n                            self.request, \"Please fill in the required shipping address fields\")\n\n                use_default_billing = form.cleaned_data.get(\n                    'use_default_billing')\n                same_billing_address = form.cleaned_data.get(\n                    'same_billing_address')\n\n                if same_billing_address:\n                    billing_address = shipping_address\n                    billing_address.pk = None\n                    billing_address.save()\n                    billing_address.address_type = 'B'\n                    billing_address.save()\n                    order.billing_address = billing_address\n                    order.save()\n\n                elif use_default_billing:\n                    print(\"Using the defualt billing address\")\n                    address_qs = Address.objects.filter(\n                        user=self.request.user,\n                        address_type='B',\n                        default=True\n                    )\n                    if address_qs.exists():\n                        billing_address = address_qs[0]\n                        order.billing_address = billing_address\n                        order.save()\n                    else:\n                        messages.info(\n                            self.request, \"No default billing address available\")\n                        return redirect('core:checkout')\n                else:\n                    print(\"User is entering a new billing address\")\n                    billing_address1 = form.cleaned_data.get(\n                        'billing_address')\n                    billing_address2 = form.cleaned_data.get(\n                        'billing_address2')\n                    billing_country = form.cleaned_data.get(\n                        'billing_country')\n                    billing_zip = form.cleaned_data.get('billing_zip')\n\n                    if is_valid_form([billing_address1, billing_country, billing_zip]):\n                        billing_address = Address(\n                            user=self.request.user,\n                            street_address=billing_address1,\n                            apartment_address=billing_address2,\n                            country=billing_country,\n                            zip=billing_zip,\n                            address_type='B'\n                        )\n                        billing_address.save()\n\n                        order.billing_address = billing_address\n                        order.save()\n\n                        set_default_billing = form.cleaned_data.get(\n                            'set_default_billing')\n                        if set_default_billing:\n                            billing_address.default = True\n                            billing_address.save()\n\n                    else:\n                        messages.info(\n                            self.request, \"Please fill in the required billing address fields\")\n\n                payment_option = form.cleaned_data.get('payment_option')\n\n                if payment_option == 'S':\n                    return redirect('core:payment', payment_option='stripe')\n                elif payment_option == 'P':\n                    return redirect('core:payment', payment_option='paypal')\n                else:\n                    messages.warning(\n                        self.request, \"Invalid payment option selected\")\n                    return redirect('core:checkout')\n        except ObjectDoesNotExist:\n            messages.warning(self.request, \"You do not have an active order\")\n            return redirect(\"core:order-summary\")\n\n\nclass PaymentView(View):\n    def get(self, *args, **kwargs):\n        order = Order.objects.get(user=self.request.user, ordered=False)\n        if order.billing_address:\n            context = {\n                'order': order,\n                'DISPLAY_COUPON_FORM': False\n            }\n            userprofile = self.request.user.userprofile\n            if userprofile.one_click_purchasing:\n                # fetch the users card list\n                cards = stripe.Customer.list_sources(\n                    userprofile.stripe_customer_id,\n                    limit=3,\n                    object='card'\n                )\n                card_list = cards['data']\n                if len(card_list) > 0:\n                    # update the context with the default card\n                    context.update({\n                        'card': card_list[0]\n                    })\n            return render(self.request, \"payment.html\", context)\n        else:\n            messages.warning(\n                self.request, \"You have not added a billing address\")\n            return redirect(\"core:checkout\")\n\n    def post(self, *args, **kwargs):\n        order = Order.objects.get(user=self.request.user, ordered=False)\n        form = PaymentForm(self.request.POST)\n        userprofile = UserProfile.objects.get(user=self.request.user)\n        if form.is_valid():\n            token = form.cleaned_data.get('stripeToken')\n            save = form.cleaned_data.get('save')\n            use_default = form.cleaned_data.get('use_default')\n\n            if save:\n                if userprofile.stripe_customer_id != '' and userprofile.stripe_customer_id is not None:\n                    customer = stripe.Customer.retrieve(\n                        userprofile.stripe_customer_id)\n                    customer.sources.create(source=token)\n\n                else:\n                    customer = stripe.Customer.create(\n                        email=self.request.user.email,\n                    )\n                    customer.sources.create(source=token)\n                    userprofile.stripe_customer_id = customer['id']\n                    userprofile.one_click_purchasing = True\n                    userprofile.save()\n\n            amount = int(order.get_total() * 100)\n\n            try:\n\n                if use_default or save:\n                    # charge the customer because we cannot charge the token more than once\n                    charge = stripe.Charge.create(\n                        amount=amount, \n                        currency=\"usd\",\n                        customer=userprofile.stripe_customer_id\n                    )\n                else:\n                    # charge once off on the token\n                    charge = stripe.Charge.create(\n                        amount=amount, \n                        currency=\"usd\",\n                        source=token\n                    )\n\n                # create the payment\n                payment = Payment()\n                payment.stripe_charge_id = charge['id']\n                payment.user = self.request.user\n                payment.amount = order.get_total()\n                payment.save()\n\n                # assign the payment to the order\n\n                order_items = order.items.all()\n                order_items.update(ordered=True)\n                for item in order_items:\n                    item.save()\n\n                order.ordered = True\n                order.payment = payment\n                order.ref_code = create_ref_code()\n                order.save()\n\n                messages.success(self.request, \"Your order was successful!\")\n                return redirect(\"/\")\n\n            except stripe.error.CardError as e:\n                body = e.json_body\n                err = body.get('error', {})\n                messages.warning(self.request, f\"{err.get('message')}\")\n                return redirect(\"/\")\n\n            except stripe.error.RateLimitError as e:\n                # Too many requests made to the API too quickly\n                messages.warning(self.request, \"Rate limit error\")\n                return redirect(\"/\")\n\n            except stripe.error.InvalidRequestError as e:\n                # Invalid parameters were supplied to Stripe's API\n                print(e)\n                messages.warning(self.request, \"Invalid parameters\")\n                return redirect(\"/\")\n\n            except stripe.error.AuthenticationError as e:\n                # Authentication with Stripe's API failed\n                # (maybe you changed API keys recently)\n                messages.warning(self.request, \"Not authenticated\")\n                return redirect(\"/\")\n\n            except stripe.error.APIConnectionError as e:\n                # Network communication with Stripe failed\n                messages.warning(self.request, \"Network error\")\n                return redirect(\"/\")\n\n            except stripe.error.StripeError as e:\n                # Display a very generic error to the user, and maybe send\n                # yourself an email\n                messages.warning(\n                    self.request, \"Something went wrong. You were not charged. Please try again.\")\n                return redirect(\"/\")\n\n            except Exception as e:\n                # send an email to ourselves\n                messages.warning(\n                    self.request, \"A serious error occurred. We have been notifed.\")\n                return redirect(\"/\")\n\n        messages.warning(self.request, \"Invalid data received\")\n        return redirect(\"/payment/stripe/\")\n\n\nclass HomeView(ListView):\n    model = Item\n    paginate_by = 10\n    template_name = \"home.html\"\n\n\nclass OrderSummaryView(LoginRequiredMixin, View):\n    def get(self, *args, **kwargs):\n        try:\n            order = Order.objects.get(user=self.request.user, ordered=False)\n            context = {\n                'object': order\n            }\n            return render(self.request, 'order_summary.html', context)\n        except ObjectDoesNotExist:\n            messages.warning(self.request, \"You do not have an active order\")\n            return redirect(\"/\")\n\n\nclass ItemDetailView(DetailView):\n    model = Item\n    template_name = \"product.html\"\n\n\n@login_required\ndef add_to_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_item, created = OrderItem.objects.get_or_create(\n        item=item,\n        user=request.user,\n        ordered=False\n    )\n    order_qs = Order.objects.filter(user=request.user, ordered=False)\n    if order_qs.exists():\n        order = order_qs[0]\n        # check if the order item is in the order\n        if order.items.filter(item__slug=item.slug).exists():\n            order_item.quantity += 1\n            order_item.save()\n            messages.info(request, \"This item quantity was updated.\")\n            return redirect(\"core:order-summary\")\n        else:\n            order.items.add(order_item)\n            messages.info(request, \"This item was added to your cart.\")\n            return redirect(\"core:order-summary\")\n    else:\n        ordered_date = timezone.now()\n        order = Order.objects.create(\n            user=request.user, ordered_date=ordered_date)\n        order.items.add(order_item)\n        messages.info(request, \"This item was added to your cart.\")\n        return redirect(\"core:order-summary\")\n\n\n@login_required\ndef remove_from_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_qs = Order.objects.filter(\n        user=request.user,\n        ordered=False\n    )\n    if order_qs.exists():\n        order = order_qs[0]\n        # check if the order item is in the order\n        if order.items.filter(item__slug=item.slug).exists():\n            order_item = OrderItem.objects.filter(\n                item=item,\n                user=request.user,\n                ordered=False\n            )[0]\n            order.items.remove(order_item)\n            messages.info(request, \"This item was removed from your cart.\")\n            return redirect(\"core:order-summary\")\n        else:\n            messages.info(request, \"This item was not in your cart\")\n            return redirect(\"core:product\", slug=slug)\n    else:\n        messages.info(request, \"You do not have an active order\")\n        return redirect(\"core:product\", slug=slug)\n\n\n@login_required\ndef remove_single_item_from_cart(request, slug):\n    item = get_object_or_404(Item, slug=slug)\n    order_qs = Order.objects.filter(\n        user=request.user,\n        ordered=False\n    )\n    if order_qs.exists():\n        order = order_qs[0]\n        # check if the order item is in the order\n        if order.items.filter(item__slug=item.slug).exists():\n            order_item = OrderItem.objects.filter(\n                item=item,\n                user=request.user,\n                ordered=False\n            )[0]\n            if order_item.quantity > 1:\n                order_item.quantity -= 1\n                order_item.save()\n            else:\n                order.items.remove(order_item)\n            messages.info(request, \"This item quantity was updated.\")\n            return redirect(\"core:order-summary\")\n        else:\n            messages.info(request, \"This item was not in your cart\")\n            return redirect(\"core:product\", slug=slug)\n    else:\n        messages.info(request, \"You do not have an active order\")\n        return redirect(\"core:product\", slug=slug)\n\n\ndef get_coupon(request, code):\n    try:\n        coupon = Coupon.objects.get(code=code)\n        return coupon\n    except ObjectDoesNotExist:\n        messages.info(request, \"This coupon does not exist\")\n        return redirect(\"core:checkout\")\n\n\nclass AddCouponView(View):\n    def post(self, *args, **kwargs):\n        form = CouponForm(self.request.POST or None)\n        if form.is_valid():\n            try:\n                code = form.cleaned_data.get('code')\n                order = Order.objects.get(\n                    user=self.request.user, ordered=False)\n                order.coupon = get_coupon(self.request, code)\n                order.save()\n                messages.success(self.request, \"Successfully added coupon\")\n                return redirect(\"core:checkout\")\n            except ObjectDoesNotExist:\n                messages.info(self.request, \"You do not have an active order\")\n                return redirect(\"core:checkout\")\n\n\nclass RequestRefundView(View):\n    def get(self, *args, **kwargs):\n        form = RefundForm()\n        context = {\n            'form': form\n        }\n        return render(self.request, \"request_refund.html\", context)\n\n    def post(self, *args, **kwargs):\n        form = RefundForm(self.request.POST)\n        if form.is_valid():\n            ref_code = form.cleaned_data.get('ref_code')\n            message = form.cleaned_data.get('message')\n            email = form.cleaned_data.get('email')\n            # edit the order\n            try:\n                order = Order.objects.get(ref_code=ref_code)\n                order.refund_requested = True\n                order.save()\n\n                # store the refund\n                refund = Refund()\n                refund.order = order\n                refund.reason = message\n                refund.email = email\n                refund.save()\n\n                messages.info(self.request, \"Your request was received.\")\n                return redirect(\"core:request-refund\")\n\n            except ObjectDoesNotExist:\n                messages.info(self.request, \"This order does not exist.\")\n                return redirect(\"core:request-refund\")\n                \n                \n                ","undoManager":{"mark":8,"position":12,"stack":[[{"start":{"row":266,"column":40},"end":{"row":266,"column":47},"action":"remove","lines":["# cents"],"id":2},{"start":{"row":266,"column":39},"end":{"row":266,"column":40},"action":"remove","lines":[" "]}],[{"start":{"row":273,"column":39},"end":{"row":273,"column":47},"action":"remove","lines":[" # cents"],"id":3}],[{"start":{"row":240,"column":43},"end":{"row":240,"column":44},"action":"insert","lines":[" "],"id":4}],[{"start":{"row":240,"column":43},"end":{"row":240,"column":44},"action":"remove","lines":[" "],"id":5}],[{"start":{"row":515,"column":54},"end":{"row":516,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":516,"column":0},"end":{"row":516,"column":16},"action":"insert","lines":["                "]},{"start":{"row":516,"column":16},"end":{"row":517,"column":0},"action":"insert","lines":["",""]},{"start":{"row":517,"column":0},"end":{"row":517,"column":16},"action":"insert","lines":["                "]},{"start":{"row":517,"column":16},"end":{"row":518,"column":0},"action":"insert","lines":["",""]},{"start":{"row":518,"column":0},"end":{"row":518,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":14,"column":13},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":7}],[{"start":{"row":16,"column":17},"end":{"row":16,"column":43},"action":"remove","lines":["settings.STRIPE_SECRET_KEY"],"id":8},{"start":{"row":16,"column":17},"end":{"row":16,"column":59},"action":"insert","lines":["sk_test_7z4x0qY2e5rLyJyVcVYs3uyw008DV4INKZ"]}],[{"start":{"row":16,"column":59},"end":{"row":16,"column":60},"action":"insert","lines":["'"],"id":9}],[{"start":{"row":16,"column":17},"end":{"row":16,"column":18},"action":"insert","lines":["'"],"id":10}],[{"start":{"row":16,"column":18},"end":{"row":16,"column":61},"action":"remove","lines":["sk_test_7z4x0qY2e5rLyJyVcVYs3uyw008DV4INKZ'"],"id":11},{"start":{"row":16,"column":17},"end":{"row":16,"column":18},"action":"remove","lines":["'"]}],[{"start":{"row":16,"column":17},"end":{"row":16,"column":59},"action":"insert","lines":["pk_live_vQHdZRsweoNg63U2tZTW21zX00wFXw1TKo"],"id":12}],[{"start":{"row":16,"column":17},"end":{"row":16,"column":18},"action":"insert","lines":["'"],"id":13}],[{"start":{"row":16,"column":60},"end":{"row":16,"column":61},"action":"insert","lines":["'"],"id":14}]]},"ace":{"folds":[],"scrolltop":781.5,"scrollleft":0,"selection":{"start":{"row":16,"column":61},"end":{"row":16,"column":61},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":44,"state":"start","mode":"ace/mode/python"}},"timestamp":1567711991416}